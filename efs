resource "aws_efs_file_system" "efs" {
  creation_token = "my-efs"
  performance_mode = "generalPurpose"  # Options: generalPurpose, maxIO
  throughput_mode  = "bursting"        # Options: bursting, provisioned
  encrypted       = true               # Enable encryption at rest

  tags = {
    Name = "MyEFS"
  }
}

resource "aws_security_group" "efs_sg" {
  name        = "efs-security-group"
  description = "Allow NFS traffic for EFS"
  vpc_id      = "your-vpc-id"  # Replace with your VPC ID

  ingress {
    from_port   = 2049
    to_port     = 2049
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Adjust for security (e.g., restrict to your VPC CIDR)
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "efs-security-group"
  }
}


resource "aws_efs_mount_target" "mount_target_a" {
  file_system_id  = aws_efs_file_system.efs.id
  subnet_id       = "your-subnet-id-1"  # Replace with your subnet ID
  security_groups = [aws_security_group.efs_sg.id]
}

resource "aws_efs_mount_target" "mount_target_b" {
  file_system_id  = aws_efs_file_system.efs.id
  subnet_id       = "your-subnet-id-2"  # Replace with another subnet ID
  security_groups = [aws_security_group.efs_sg.id]
}


resource "aws_efs_access_point" "efs_ap" {
  file_system_id = aws_efs_file_system.efs.id

  root_directory {
    path = "/data"
    creation_info {
      owner_uid   = 1001
      owner_gid   = 1001
      permissions = "755"
    }
  }

  tags = {
    Name = "MyEFSAccessPoint"
  }
}


output "efs_id" {
  value = aws_efs_file_system.efs.id
}

output "efs_dns_name" {
  value = aws_efs_file_system.efs.dns_name
}
